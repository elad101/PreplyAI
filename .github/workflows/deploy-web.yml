name: Deploy Web to Cloud Run

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
    paths:
      - 'apps/web/**'
      - '.github/workflows/deploy-web.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  GCP_WIF_PROVIDER: ${{ secrets.GCP_WIF_PROVIDER }}
  GCP_WIF_SERVICE_ACCOUNT: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
  ARTIFACT_REGISTRY_REPO: salesprep
  SERVICE_NAME: salesprep-web

jobs:
  deploy:
    name: Build and Deploy Web
    runs-on: ubuntu-latest
    
    # Determine environment based on trigger
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "SERVICE_SUFFIX=" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "SERVICE_SUFFIX=-staging" >> $GITHUB_OUTPUT
          fi
          
          # Generate image tag
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_WIF_SERVICE_ACCOUNT }}
          token_format: access_token

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Create .env file for build
        run: |
          cat > apps/web/.env.production << EOF
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          EOF

      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ steps.env.outputs.IMAGE_TAG }} \
            --tag ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:latest \
            --file apps/web/Dockerfile \
            ./apps/web

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ steps.env.outputs.IMAGE_TAG }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}${{ steps.env.outputs.SERVICE_SUFFIX }} \
            --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ steps.env.outputs.IMAGE_TAG }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 256Mi \
            --min-instances 0 \
            --max-instances 5 \
            --timeout 60 \
            --concurrency 100 \
            --service-account ${{ env.GCP_WIF_SERVICE_ACCOUNT }}

      - name: Get service URL
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}${{ steps.env.outputs.SERVICE_SUFFIX }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service URL: $SERVICE_URL"

      - name: Health check
        run: |
          MAX_ATTEMPTS=10
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Health check attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS..."
            
            if curl -f -s "${{ steps.service-url.outputs.SERVICE_URL }}" > /dev/null; then
              echo "✅ Health check passed!"
              exit 0
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done
          
          echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** ${{ env.SERVICE_NAME }}${{ steps.env.outputs.SERVICE_SUFFIX }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ steps.env.outputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** ${{ steps.env.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ steps.service-url.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

